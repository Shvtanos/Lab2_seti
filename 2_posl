#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <pthread.h>

#define SIZE 1000000
#define MAX_THREADS 4

typedef struct {
    int *array;
    int start;
    int end;
    long long partial_sum;
} ThreadData;

void *partial_sum(void *arg) {
    ThreadData *data = (ThreadData *)arg;
    data->partial_sum = 0;
    for (int i = data->start; i < data->end; i++) {
        data->partial_sum += data->array[i];
    }
    return NULL;
}

int main(int argc, char *argv[]) {
    int num_threads = atoi(argv[1]);
    int *array = malloc(SIZE * sizeof(int));
    for (int i = 0; i < SIZE; i++) {
        array[i] = rand() % 100;
    }

    pthread_t threads[num_threads];
    ThreadData data[num_threads];
    int chunk = SIZE / num_threads;

    clock_t start = clock();
    for (int i = 0; i < num_threads; i++) {
        data[i].array = array;
        data[i].start = i * chunk;
        data[i].end = (i == num_threads - 1) ? SIZE : (i + 1) * chunk;
        pthread_create(&threads[i], NULL, partial_sum, &data[i]);
    }

    long long total = 0;
    for (int i = 0; i < num_threads; i++) {
        pthread_join(threads[i], NULL);
        total += data[i].partial_sum;
    }
    clock_t end = clock();
    printf("Parallel sum: %lld, Time: %.2f ms\n", total, (double)(end - start) * 1000 / CLOCKS_PER_SEC);

    free(array);
    return 0;
}
