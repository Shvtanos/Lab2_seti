#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS 1000
#define COLS 1000

void matrix_ops(int **a, int **b, int **result, char op) {
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            switch(op) {
                case '+': result[i][j] = a[i][j] + b[i][j]; break;
                case '-': result[i][j] = a[i][j] - b[i][j]; break;
                case '*': result[i][j] = a[i][j] * b[i][j]; break;
                case '/': result[i][j] = b[i][j] != 0 ? a[i][j] / b[i][j] : 0; break;
            }
        }
    }
}

int main() {
    int **a = malloc(ROWS * sizeof(int *));
    int **b = malloc(ROWS * sizeof(int *));
    int **result = malloc(ROWS * sizeof(int *));
    for (int i = 0; i < ROWS; i++) {
        a[i] = malloc(COLS * sizeof(int));
        b[i] = malloc(COLS * sizeof(int));
        result[i] = malloc(COLS * sizeof(int));
        for (int j = 0; j < COLS; j++) {
            a[i][j] = rand() % 100;
            b[i][j] = rand() % 100 + 1;
        }
    }

    clock_t start = clock();
    matrix_ops(a, b, result, '+');
    clock_t end = clock();
    printf("Sequential time: %.2f ms\n", (double)(end - start) * 1000 / CLOCKS_PER_SEC);

    // Free memory
    for (int i = 0; i < ROWS; i++) {
        free(a[i]); free(b[i]); free(result[i]);
    }
    free(a); free(b); free(result);
    return 0;
}
